//
//  CryptoTests.swift
//  kbswift
//
//  Created by Prashant Sinha on 05/01/17.
//  Copyright Â© 2017 Noop. All rights reserved.
//

import XCTest


@testable import kbswift

class CryptoTests: XCTestCase {
    /// These tests are taken from https://github.com/Tarsnap/scrypt/blob/master/tests/test_scrypt.good
    
    func testCryptoGoodOne() {
        let key = try! Crypto.scrypt(pswd: "password", salt: "NaCl", N: 1024, r: 8, p: 16, bufflen: 64)
        let known: CryptoBuffer = [
            0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00, 0x78, 0x56, 0xe7, 0x19, 0x0d, 0x01, 0xe9, 0xfe,
            0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30, 0xe7, 0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62,
            0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88, 0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,
            0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d, 0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40,
        ]
        XCTAssert(key! == known)
    }
    
    func testCryptoGoodTwo() {
        let key = try! Crypto.scrypt(pswd: "pleaseletmein", salt: "SodiumChloride", N: 1048576, r: 8, p: 1, bufflen: 64)
        let known: CryptoBuffer = [
            0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae, 0xad, 0xdb, 0xbe, 0x09, 0xcf, 0x70, 0xf8, 0x81,
            0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d, 0xab, 0xe5, 0xee, 0x98, 0x20, 0xad, 0xaa, 0x47,
            0x8e, 0x56, 0xfd, 0x8f, 0x4b, 0xa5, 0xd0, 0x9f, 0xfa, 0x1c, 0x6d, 0x92, 0x7c, 0x40, 0xf4, 0xc3,
            0x37, 0x30, 0x40, 0x49, 0xe8, 0xa9, 0x52, 0xfb, 0xcb, 0xf4, 0x5c, 0x6f, 0xa7, 0x7a, 0x41, 0xa4,
        ]
        XCTAssert(key! == known)
    }
}


class EdDSATests: XCTestCase {
    func testCreateSeed() {
        let _: CryptoBuffer = EdDSA.createSeed()
    }

    func testCreateKeyPair() {
        let seed: CryptoBuffer = [
            0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae, 0xad, 0xdb, 0xbe, 0x09, 0xcf, 0x70, 0xf8, 0x81,
            0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d, 0xab, 0xe5, 0xee, 0x98, 0x20, 0xad, 0xaa, 0x47,
        ]
        let keypair_good: CryptoKeyPair = (
            [
                0x3f, 0x75, 0xb4, 0xfe, 0x4d, 0x77, 0xe0, 0xca, 0xe2, 0x2a, 0xd9, 0x7d, 0x58, 0xe6, 0x53, 0xbe,
                0x7c, 0x7e, 0xee, 0xe7, 0x2a, 0x12, 0x29, 0xbe, 0x81, 0x95, 0x4c, 0xd6, 0xa3, 0xaf, 0x71, 0x27,
            ],
            [
                0x18, 0xcb, 0x3d, 0x8a, 0x5b, 0x62, 0x11, 0xa4, 0xa0, 0xed, 0x11, 0x1b, 0xc8, 0x78, 0x82, 0x08,
                0x59, 0x06, 0x27, 0x8d, 0xf5, 0x51, 0xd1, 0xb1, 0xe5, 0xd3, 0x4b, 0x32, 0x1a, 0x64, 0xe9, 0x7f,
                0x67, 0x7e, 0x71, 0x67, 0x3d, 0xf3, 0x91, 0xe2, 0x02, 0xd1, 0x0c, 0xe8, 0x39, 0x71, 0x15, 0x69,
                0x54, 0xac, 0xeb, 0xa5, 0xbf, 0x99, 0x29, 0xb0, 0x7f, 0x7f, 0x1b, 0x1f, 0xd3, 0xfc, 0xa3, 0x2a,
            ]
        )
        let keypair = try! EdDSA.createKeypair(seed: seed)

        XCTAssert(keypair.public_key == keypair_good.public_key)
        XCTAssert(keypair.private_key == keypair_good.private_key)
    }

    func testSignature() {
        let msg = "I like to move it!"
        let keypair: CryptoKeyPair = (
            [
                0x3f, 0x75, 0xb4, 0xfe, 0x4d, 0x77, 0xe0, 0xca, 0xe2, 0x2a, 0xd9, 0x7d, 0x58, 0xe6, 0x53, 0xbe,
                0x7c, 0x7e, 0xee, 0xe7, 0x2a, 0x12, 0x29, 0xbe, 0x81, 0x95, 0x4c, 0xd6, 0xa3, 0xaf, 0x71, 0x27,
            ],
            [
                0x18, 0xcb, 0x3d, 0x8a, 0x5b, 0x62, 0x11, 0xa4, 0xa0, 0xed, 0x11, 0x1b, 0xc8, 0x78, 0x82, 0x08,
                0x59, 0x06, 0x27, 0x8d, 0xf5, 0x51, 0xd1, 0xb1, 0xe5, 0xd3, 0x4b, 0x32, 0x1a, 0x64, 0xe9, 0x7f,
                0x67, 0x7e, 0x71, 0x67, 0x3d, 0xf3, 0x91, 0xe2, 0x02, 0xd1, 0x0c, 0xe8, 0x39, 0x71, 0x15, 0x69,
                0x54, 0xac, 0xeb, 0xa5, 0xbf, 0x99, 0x29, 0xb0, 0x7f, 0x7f, 0x1b, 0x1f, 0xd3, 0xfc, 0xa3, 0x2a,
            ]
        )
        let known_sig: CryptoBuffer = [
            0xb3, 0xb7, 0x07, 0xbb, 0x7e, 0xff, 0x1d, 0xcc, 0xc0, 0x1b, 0x1e, 0xf4, 0xeb, 0x73, 0x4c, 0xb5,
            0x6a, 0x02, 0xf1, 0x40, 0xd4, 0x57, 0x38, 0xee, 0x33, 0x00, 0xba, 0x3d, 0x1e, 0xb2, 0x50, 0xbb,
            0x87, 0x7b, 0x11, 0xa5, 0x92, 0x9c, 0x16, 0x3a, 0x58, 0x48, 0x50, 0xe9, 0xb9, 0x22, 0xe0, 0xd8,
            0x2c, 0xf1, 0x4c, 0x8f, 0xa3, 0x94, 0xb9, 0xa2, 0x7a, 0x79, 0x00, 0x8c, 0xcb, 0x7a, 0x8d, 0x0f,
        ]
        let sig = EdDSA.sign(message: msg, keypair: keypair)
        XCTAssert(known_sig == sig)
    }

    func testVerifySignature() {
        let seed = EdDSA.createSeed()
        let keypair = try! EdDSA.createKeypair(seed: seed)
        let msg = "Hello, is there anybody in there?"
        let sig = EdDSA.sign(message: msg, keypair: keypair)
        XCTAssert(EdDSA.verify(signature: sig, message: msg, public_key: keypair.public_key))
    }
}
